#+STARTUP: overview
#+TITLE: yukimacs
#+LANGUAGE: en
#+OPTIONS: num:nil
A GNU/Emacs config built from the ground up (no Spacemacs or Doom Emacs), /heavily/ inspired by [[https://github.com/daedreth/UncleDavesEmacs/][Uncle Dave's Emacs]] and [[https://github.com/snackon/Witchmacs][Witchmacs]].

[[./screenshot.png]]

/If Vim expands your mind, Emacs blows it./

* Installing
** 1. Install the dependencies if you need them.
=clang= (you probably already have this)

=ccls=

=sbcl=

=python-lsp-server=

=rustup component add rust-src=

=rust-analyzer=

** 2. =clone= this repository.
Remove your current =~/.emacs= and =~/.emacs.d=.

=git clone https://github.com/pprobst/yukimacs ~/.emacs.d=

Or, preferably, pick what you want separately.

* =Org= mode
You might've heard of people that use Emacs just because of [[https://orgmode.org/][Org]] mode. Folks use it for a myriad of reasons; from simple note-taking to literate programming and computational notebooks. This configuration file itself is in Org mode, with small sections of Emacs Lisp.
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

  (use-package org
      :config
      (add-hook 'org-mode-hook 'org-indent-mode)
      (add-hook 'org-mode-hook
                '(lambda ()
                   (visual-line-mode 1))))

  ;; Don't split src window.
  (setq org-src-window-setup 'current-window)

  (use-package org-indent
      :ensure nil
      :diminish org-indent-mode)

  (use-package htmlize)

  (use-package org-bullets
    ;; :disabled t
    :hook (org-mode . org-bullets-mode))
#+end_src

* Eshell
** Prompt
#+begin_src emacs-lisp
  (setq eshell-prompt-regexp "^[^αλ\n]*[αλ] ")
  (setq eshell-prompt-function
        (lambda nil
          (concat
           (if (string= (eshell/pwd) (getenv "HOME"))
               (propertize "~" 'face `(:foreground "#99CCFF"))
             (replace-regexp-in-string
              (getenv "HOME")
              (propertize "~" 'face `(:foreground "#99CCFF"))
              (propertize (eshell/pwd) 'face `(:foreground "#99CCFF"))))
           (if (= (user-uid) 0)
               (propertize " α " 'face `(:foreground "#FF6666"))
           (propertize " λ " 'face `(:foreground "#A6E22E"))))))

  (setq eshell-highlight-prompt nil)
#+end_src

** Aliases
#+begin_src emacs-lisp
  (defalias 'open 'find-file-other-window)
  (defalias 'clean 'eshell/clear-scrollback)
#+end_src

** Open files as root
#+begin_src emacs-lisp
  (defun eshell/sudo-open (filename)
    "Open a file as root in Eshell."
    (let ((qual-filename (if (string-match "^/" filename)
                             filename
                           (concat (expand-file-name (eshell/pwd)) "/" filename))))
      (switch-to-buffer
       (find-file-noselect
        (concat "/sudo::" qual-filename)))))
#+end_src

** Super-Control-RET to open Eshell
#+begin_src emacs-lisp
  (defun eshell-other-window ()
    "Create or visit an eshell buffer."
    (interactive)
    (if (not (get-buffer "*eshell*"))
        (progn
          (split-window-sensibly (selected-window))
          (other-window 1)
          (eshell))
      (switch-to-buffer-other-window "*eshell*")))

  (global-set-key (kbd "<s-C-return>") 'eshell-other-window)
#+end_src

* QoL
Quality-of-life modifications.
** 'y' or 'n' instead of 'yes' or 'no' when confirming
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Disable backup files
#+begin_src emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+end_src

** Show line numbers
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
#+end_src

** Show parent parentheses
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

** Change GUI elements
#+begin_src emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (set-fringe-mode 1)
#+end_src

** Enable copy-pasting outside of Emacs
#+begin_src emacs-lisp
  (setq x-select-enable-clipboard t)
#+end_src

** Disable the default startup screen
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Conservative scroll
When at the end of the "page", scroll just one line at a time.
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src

** Disable ring bell sound
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Prettify symbols
#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src

** Indentation
#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (setq-default standard-indent 4)
  (setq c-basic-offset tab-width)
  (setq-default electric-indent-inhibit t)
  (setq-default indent-tabs-mode nil) ;; spaces instead of tabs
  (setq backward-delete-char-untabify-method 'nil)
#+end_src

** Switches cursor automatically to new window
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
      (interactive)
      (split-window-below)
      (balance-windows)
      (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
      (interactive)
      (split-window-right)
      (balance-windows)
      (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

** Highlights current line
#+begin_src emacs-lisp
  (when window-system (global-hl-line-mode t))
#+end_src

** Bracket pair-matching
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
#+end_src

** Visiting the configuration
#+begin_src emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src

** Reloading the configuration
#+begin_src emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtine"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src

* General packages
** =diminish=
Hides minor modes to prevent clutter.
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

** =no-littering=
Keep folders clean.
#+begin_src emacs-lisp
  (use-package no-littering)

  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src
** =which-key=
Helps you with commands -- it shows suggestions while you're typing.
#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :init (which-key-mode))
#+end_src

** =evil=
Imports keybindings and some functionalities from Vi.
Useful if, like me, you've been a Vim user for some time.
#+begin_src emacs-lisp
  (use-package evil
    :defer nil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))

  ;; Commenting lines
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** =popup-kill-ring=
Browse through your kill-ring with M-y instead of merely "cycling" through it. Useful when "copying" and "pasting", for example.
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :bind ("M-y" . popup-kill-ring))
#+end_src

** =beacon=
Briefly highlights the cursor when switching windows/buffers.
#+begin_src emacs-lisp
  (use-package beacon
    :diminish beacon-mode
    :init
    (beacon-mode 1))
#+end_src

** =auto-package-update=
Automatically updates packages (and removes old ones).
#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "12:00"))
#+end_src

** =avy=
The best thing ever.

M-s <character> to move to the place of said <character> instead of moving the cursor to it.
It's hard to explain, but you'll use C-n and C-p way less.
#+begin_src emacs-lisp
   (use-package avy
      :bind
      ("M-s" . avy-goto-char))
#+end_src

** =selectrum=
A better completion UI. Searching for files and commands is now easier.
#+begin_src emacs-lisp
  (use-package selectrum
    :hook (after-init . selectrum-mode))

  ;; "Your candidates are sorted by frecency. Your most recent choices are saved,
  ;; and those are sorted first. After that, your most frequent choices are saved,
  ;; and those are sorted next. The rest of the candidates are sorted by length.
  ;; This algorithm turns out to do very well in practice while being fast and
  ;; not very magical."
  (use-package prescient
    :after selectrum
    :config
    (prescient-persist-mode 1))

  (use-package selectrum-prescient
    :after (selectrum prescient)
    :config
    (selectrum-prescient-mode 1))

  ;; Search without order.
  ;; (e.g. try M-x emacs time)
  (use-package orderless
    :after selectrum
    :custom
    (completion-styles (list 'orderless))
    (selectrum-refine-candidates-function #'orderless-filter)
    (selectrum-highlight-candidates-function #'orderless-highlight-matches))
#+end_src

** =ctrlf=
Better isearch.
#+begin_src emacs-lisp
  ; C-s: ctrlf-forward-default (originally isearch-forward)
  ; C-r: ctrlf-backward-default (originally isearch-backward)
  ; C-M-s: ctrlf-forward-alternate (originally isearch-forward-regexp)
  ; C-M-r: ctrlf-backward-alternate (originally isearch-backward-regexp)
  ; M-s _: ctrlf-forward-symbol (originally isearch-forward-symbol)
  ; M-s .: ctrlf-forward-symbol-at-point (originally isearch-forward-symbol-at-point)
  (use-package ctrlf
    :init (ctrlf-mode +1))
#+end_src
** =switch-window=
Don't keep using C-x o to switch windows anymore.
#+begin_src emacs-lisp
   (use-package switch-window
      :config
      (setq switch-window-input-style 'minibuffer)
      (setq switch-window-increase 4)
      (setq switch-window-threshold 2)
      (setq switch-window-shortcut-style 'qwerty)
      (setq switch-window-qwerty-shortcuts
            '("a" "s" "d" "f" "j" "k" "l"))
      :bind
      ([remap other-window] . switch-window))
#+end_src

** =rainbow=
=rainbow-mode= highlights color hexadecimals with the appropriate color, while =rainbow-delimiters= colors delimiters (e.g. parentheses).
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish rainbow-mode
    :init
      (add-hook 'prog-mode-hook 'rainbow-mode))

  (use-package rainbow-delimiters
    :diminish rainbow-delimiters-mode
    :init
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** =powerline=
#+begin_src emacs-lisp
  (use-package powerline
     :config
     (setq powerline-default-separator 'bar)
     :init
     (require 'powerline)
     (powerline-center-evil-theme)
     :hook
     ('after-init-hook) . 'powerline-reset)
#+end_src

** =treemacs=
#+begin_src emacs-lisp
  (use-package treemacs
    :bind (:map global-map
                ("C-x t t" . treemacs)
                ("C-x t 1" . treemacs-select-window))
    :custom
    (treemacs-resize-icons 15))

  (use-package treemacs-evil
    :after treemacs evil)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :config (treemacs-icons-dired-mode))
  #+end_src

** =dashboard=
#+begin_src emacs-lisp
  (use-package dashboard
    :defer nil
    :preface
    (defun create-scratch-buffer ()
      "Create a scratch buffer"
      (interactive)
      (switch-to-buffer (get-buffer-create "*scratch*"))
      (lisp-interaction-mode))
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "YUKIMACS : It's a Wonderful Everyday!")
    (setq dashboard-startup-banner "~/.emacs.d/img/yukimacs-logo.png")
    (setq dashboard-center-content t)
    (setq dashboard-init-info (format "%d packages loaded in %s"
                                      (length package-activated-list) (emacs-init-time)))
    (setq dashboard-set-footer nil)
    (setq dashboard-set-navigator t)
    (setq dashboard-navigator-buttons
          `(;; line1
            ((,nil
              "Yukimacs on github"
              "Open yukimacs' github on your browser"
              (lambda (&rest _) (browse-url "https://github.com/pprobst/yukimacs"))
              'default)
             (,nil
              "Open scratch buffer"
              "Switch to the scratch buffer"
              (lambda (&rest _) (create-scratch-buffer))
              'default)
             (nil
              "Open config.org"
              "Open yukimacs' config file for easy editing"
              (lambda (&rest _) (find-file "~/.emacs.d/config.org"))
              'default)))))
#+end_src

* Programming
** =yasnippet=
Useful snippets.
#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :config
      (use-package yasnippet-snippets)
      (use-package auto-yasnippet)
      (yas-reload-all))
#+end_src

** =flycheck=
Syntax checking.
#+begin_src emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :hook (after-init . global-flycheck-mode)
    :custom
    (flycheck-check-syntax-automatically '(save mode-enabled)))
#+end_src

** =eldoc=
Display documentation (e.g. arguments of a function).
#+begin_src emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode
    :hook (after-init . global-eldoc-mode))
#+end_src

** =LSP=
Language server. Will provide us with IDE-like features.
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :custom
    (lsp-auto-guess-root t)
    (lsp-log-io t)
    (lsp-prefer-flymake nil))

  ;; Enhance UI
  (use-package lsp-ui
    :after (lsp-mode)
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-delay 3.0)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-flycheck-enable t)
    (lsp-ui-peek-always-show t))

  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-mode t)
    (dap-ui-mode t))

  (use-package lsp-treemacs
    :after (lsp-mode)
    :commands lsp-treemacs
    :config
    (lsp-treemacs-sync-mode 1))
#+end_src

** C & C++
#+begin_src emacs-lisp
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)

  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)

  (use-package ccls
    :config
    (setq ccls-executable "ccls")
    (setq lsp-prefer-flymake nil)
    (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
    (setq ccls-sem-highlight-method 'overlay)
    :hook ((c-mode c++-mode) .
           (lambda () (require 'ccls) (lsp))))
#+end_src

** Python
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'yas-minor-mode)
  (add-hook 'python-mode-hook 'flycheck-mode)

  (use-package lsp-python-ms
    :hook (python-mode . (lambda ()
                           (require 'lsp-python-ms)
                           (lsp))))
#+end_src

** Lisp
#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)

  (use-package slime
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl") ;; install SBCL from your repos
    (setq slime-contribs '(slime-fancy)))

  ;; Better help buffer
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Rust
#+begin_src emacs-lisp
  (use-package rustic
    :init
    (setq rustic-lsp-server 'rust-analyzer)
    (setq rustic-flycheck-setup-mode-line-p nil)
    :hook ((rustic-mode . (lambda ()
                            (lsp-ui-doc-mode)
                            (company-mode))))
    :config
    (setq rust-indent-method-chain t)
    (setq rustic-format-on-save t))

  (use-package flycheck-rust)
#+end_src

** Go
#+begin_src emacs-lisp
  ;(use-package go-mode
  ;  :hook (go-mode . lsp-deferred))
#+end_src

** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :commands yaml-mode)
#+end_src

** Git integration
#+begin_src emacs-lisp
  (use-package magit
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))

  (use-package treemacs-magit
      :after treemacs magit)
#+end_src


* DISCLAIMER
This free software project is not related in any way to the video game development company [[https://www.keromakura.net/][KeroQ]].
